name: kata

on:
  push:
    branches: [ kata ]
  workflow_dispatch:
    
permissions: # added using https://github.com/step-security/secure-workflows
  contents: read

env:
  GO111MODULE: on 
  PROJECT: kata-containers
  BRANCH: stable-2.5
  RUSTUP_DIST_SERVER: "https://mirrors.ustc.edu.cn/rust-static"
  RUSTUP_UPDATE_ROOT: "https://mirrors.ustc.edu.cn/rust-static/rustup"
  REGISTRY_NAME: ghcr.yylt.gq

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: 
        - self-hosted
        - ubuntu-20.04
    outputs:
      date: ${{ steps.data.outputs.date }}
      x64image: ${{ steps.data.outputs.amd64 }}
      armimage: ${{ steps.data.outputs.arm64 }}
    steps:
    - name: Set Data
      id: data
      shell: bash
      run: |
        set -x
        time=$(date +'%Y%m%d%H%M')
        echo "date=$time" >> "$GITHUB_OUTPUT"
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" ]]; then
          echo "amd64=amd64-ecr-deploy:$time" >> "$GITHUB_OUTPUT"
        else
          echo "arm64=arm64-ecr-deploy:$time" >> "$GITHUB_OUTPUT"
        fi

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.77.2
        override: true

    - name: Set up Go 1.22
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out repo code
      uses: actions/checkout@v2

    - name: Check out build code
      uses: actions/checkout@v2
      with:
        repository: easystack/kata-containers
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.KPULL }}  
        path: ${{ env.PROJECT }}

    - name: Login to Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_NAME }}
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.GHCR_PASSWORD }}

    - name: Build image
      run: |
        cd ${{ env.PROJECT }}
        make -f ../kata-image/kata-image.mk all
      env:
        REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
        IMAGE_TAG: ${{ steps.data.outputs.date }}
        DEBUG: true

  notify:
    name: notify 
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    needs: [build]

    steps:
    - name: WeChat Work notification
      shell: bash
      env:
        DATE: ${{ needs.build.outputs.date }}
        AMD64: ${{ needs.build.outputs.x64image }}
        ARM64: ${{ needs.build.outputs.armimage }}
        WEBHOOK: ${{ secrets.WEWORK_ECRGROUP_BUILD }}
      run: |
        text="ecr_deploy 编译完成"
        regname=$(echo ${{ env.REGISTRY_NAME }} |awk -F . '{print $1}').io
        text="$text, 仓库: $regname"
        if [[ "$AMD64" != "" ]];then
          text="$text\n$AMD64"
        fi
        if [[ "$ARM64" != "" ]];then
          text="$text\n$ARM64"
        fi
        echo "text: $text"
        data="{\"msgtype\":\"text\",\"text\":{\"content\":\"$text\"}}"
        #curl ${WEBHOOK} -H 'Content-Type: application/json' -d "$data"
