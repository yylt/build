name: kata2

on:
  push:
    branches: [ kata2 ]
  workflow_dispatch:
    
permissions: # added using https://github.com/step-security/secure-workflows
  contents: write

env:
  GO111MODULE: on 
  PROJECT: kata-containers
  BRANCH: stable-2.5
  REGISTRY_NAME: ghcr.yylt.gq

jobs:
  build_selfhost:
    name: Build kernel and image for x64
    runs-on: [self-hosted, linux, x64]
    outputs:
      date: ${{ steps.date.outputs.date }}
      amd64: ${{ steps.date.outputs.amd64 }}
      arm64: ${{ steps.date.outputs.arm64 }}
    steps:
    - name: Get current date
      id: date
      shell: bash
      run: |
        set -x
        echo "date=$(date +'%Y%m%d%H%M')" >> "$GITHUB_OUTPUT"
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" ]]; then
          echo "amd64=${{ env.REGISTRY_NAME }}/yylt/amd64-ecr-deploy" >> "$GITHUB_OUTPUT"
        else
          echo "arm64=${{ env.REGISTRY_NAME }}/yylt/arm64-ecr-deploy" >> "$GITHUB_OUTPUT"
        fi

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.77.2
        override: true

    - name: Set up Go 1.22
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out repo code
      uses: actions/checkout@v2

    - name: Check out build code
      uses: actions/checkout@v2
      with:
        repository: easystack/kata-containers
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.KPULL }}  
        path: ${{ env.PROJECT }}

    - name: Build kata image
      run: |
        cd ${{ env.PROJECT }}
        make -f ../kata-image/kata-image.mk target
      env:
        REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
        IMAGE_TAG: ${{ steps.date.outputs.date }}
        TARGET: ""

    - name: Build mellanox image
      run: |
        cd ${{ env.PROJECT }}
        make -f ../kata-image/kata-image.mk target
      env:
        REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
        IMAGE_TAG: ${{ steps.date.outputs.date }}
        TARGET: "mellanox"

  build_action:
    name: Build kernel and image for x64
    runs-on: ubuntu-22.04
    outputs:
      date: ${{ steps.date.outputs.date }}
      amd64: ${{ steps.date.outputs.amd64 }}
      arm64: ${{ steps.date.outputs.arm64 }}
    steps:
    - name: Get current date
      id: date
      shell: bash
      run: |
        set -x
        echo "date=$(date +'%Y%m%d%H%M')" >> "$GITHUB_OUTPUT"
        ARCH=$(uname -m)
        if [[ "$ARCH" == "x86_64" ]]; then
          echo "amd64=${{ env.REGISTRY_NAME }}/yylt/amd64-ecr-deploy" >> "$GITHUB_OUTPUT"
        else
          echo "arm64=${{ env.REGISTRY_NAME }}/yylt/arm64-ecr-deploy" >> "$GITHUB_OUTPUT"
        fi

    - uses: actions-rs/toolchain@v1
      with:
        toolchain: 1.77.2
        override: true

    - name: Set up Go 1.22
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Check out repo code
      uses: actions/checkout@v2

    - name: Check out build code
      uses: actions/checkout@v2
      with:
        repository: easystack/kata-containers
        ref: ${{ env.BRANCH }}
        token: ${{ secrets.KPULL }}  
        path: ${{ env.PROJECT }}

    - name: Build original image
      run: |
        cd ${{ env.PROJECT }}
        make -f ../kata-image/kata-image.mk build-image 
        make -f ../kata-image/kata-image.mk build-kernel
      env:
        REGISTRY_NAME: ${{ env.REGISTRY_NAME }}
        IMAGE_TAG: ${{ steps.date.outputs.date }}
        TARGET: ""

  # notify:
  #   name: notify 
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 5
  #   needs: [build]

  #   steps:
  #   - name: WeChat Work notification
  #     shell: bash
  #     env:
  #       DATE: ${{needs.build.outputs.date}}
  #       AMD64: ${{needs.build.outputs.amd64}}
  #       ARM64: ${{needs.build.outputs.arm64}}
  #       WEBHOOK: ${{ secrets.WEWORK_ECRGROUP_BUILD }}
  #     run: |
  #       text="ecr_deploy 编译完成"
  #       if [[ "$AMD64" != "" ]];then
  #         text="$text\nimage: $AMD64:$DATE"
  #       fi
  #       if [[ "$ARM64" != "" ]];then
  #         text="$text\nimage: $ARM64:$DATE"
  #       fi
  #       echo "text: $text"
  #       data="{\"msgtype\":\"text\",\"text\":{\"content\":\"$text\"}}"
  #       curl ${WEBHOOK} -H 'Content-Type: application/json' -d "$data"
